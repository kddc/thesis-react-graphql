"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _objectWithoutProperties(e,n){var t={};for(var r in e)n.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}function identity(e){return e}function parseDate(e){return new Date(e)}function parseDateLiteral(e){if(e.kind===_language.Kind.STRING){if(1===e.value.split("T").length&&-1!==e.value.indexOf(":")){const n=new Date;return new Date(n.getFullYear()+"-"+(1+n.getMonth())+"-"+n.getDate()+"T"+e.value)}return new Date(e.value)}return null}function parseJSONLiteral(e){switch(e.kind){case _language.Kind.STRING:case _language.Kind.BOOLEAN:return e.value;case _language.Kind.INT:case _language.Kind.FLOAT:return parseFloat(e.value);case _language.Kind.OBJECT:{const n=Object.create(null);return e.fields.forEach(e=>{n[e.name.value]=parseJSONLiteral(e.value)}),n}case _language.Kind.LIST:return e.values.map(parseJSONLiteral);default:return null}}var _slicedToArray=function(){return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,n){var t=[],r=!0,s=!1,o=void 0;try{for(var a,i=e[Symbol.iterator]();!(r=(a=i.next()).done)&&(t.push(a.value),!n||t.length!==n);r=!0);}catch(e){s=!0,o=e}finally{try{!r&&i.return&&i.return()}finally{if(s)throw o}}return t}(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_extends=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},_graphql=require("graphql"),_graphqlTools=require("graphql-tools"),_lodash=require("lodash"),_graphqlRelay=require("graphql-relay"),_dataloader=require("dataloader"),_dataloader2=_interopRequireDefault(_dataloader),_language=require("graphql/language");const base64=e=>Buffer.from(e,"utf8").toString("base64"),unbase64=e=>Buffer.from(e,"base64").toString("utf8"),combine=(e,n)=>{const t=[];for(let r=0;r<e.length;r+=1)t.push({key:e[r],value:n[r]});return t},mergeResults=(e,n)=>{const t={},r=[];for(let n=0;n<e.length;n+=1)!0!==t[e[n].id]&&(t[e[n].id]=!0,r[r.length]=e[n]);for(let e=0;e<n.length;e+=1)!0!==t[n[e].id]&&(t[n[e].id]=!0,r[r.length]=n[e]);return r},keywords=["and","or","eq","ne","in","nin","exists","gt","gte","lt","lte","regex","nearSphere","geometry","maxDistance"],parseFilterInput=e=>{const n=e;return"object"==typeof n&&Object.keys(n).forEach(e=>{-1!==keywords.indexOf(e)?(n[`$${e}`]=parseFilterInput(n[e]),delete n[e]):n[e]=parseFilterInput(n[e])}),n},parseSortByInput=(e,n=!1)=>{const t=_extends({},e);return Object.keys(t).forEach(e=>{t[e]=n?"ASC"===t[e]?-1:1:"ASC"===t[e]?1:-1}),t};class BaqendResolver{constructor({db:e,loader:n,api:t}){this.db=e,this.loader=n,this.api=t||"simple"}resolveNodeQuery({id:e},n){const t=this.fromGlobalId(e).type;return this.resolveReference(t,e,n)}resolveReferenceQuery(e,{id:n},t){return this.resolveReference(e,n,t)}resolveNodeCollectionQuery({ids:e},n){return e.map(e=>{const t=this.fromGlobalId(e).type;return this.resolveReference(t,e,n)})}resolveReferenceCollectionQuery(e,n,t){return this.fetchEntities(e,n,t)}resolveReference(e,n,t){return n&&this.loader[e].load(n)}resolveList(e,n){const t=e.length;var r=(0,_graphqlRelay.connectionFromArray)(e,n);return{total:t,edges:r.edges,pageInfo:r.pageInfo}}resolveSet(e,n){return e}resolveReferenceSet(e,n,t,r){return n&&this.loader[e].loadMany(n)}resolveReferenceList(e,n,t,r){return n&&this.loader[e].loadMany(n).then(e=>this.resolveList(e,t))}resolveMap(e,n,t){if(n){let r,s;return r=e[0]?this.resolveReferenceSet(e[0],Object.keys(n),t):this.resolveSet(Object.keys(n),t),s=e[1]?this.resolveReferenceSet(e[1],Object.keys(n).map(e=>n[e]),t):this.resolveSet(Object.keys(n).map(e=>n[e]),t),Promise.all([r,s]).then(e=>combine(e[0],e[1]))}return null}fetchEntities(e,n,t){const r=n.first,s=n.after,o=n.last,a=n.before,i=n.filter?n.filter:{},d=n.sortBy?n.sortBy:{id:"ASC"};return this.getCount({type:e,filter:i}).then(n=>{const t=this.forwardPaginationEntities({type:e,filter:i,sortBy:d,first:r,after:s,last:o,before:a,total:n}),l=this.backwardPaginationEntities({type:e,filter:i,sortBy:d,first:r,after:s,last:o,before:a,total:n});return Promise.all([t,l]).then(e=>{const t=mergeResults(e[0],e[1]),i=this.getPageInfo(t,n,r,s,o,a);return{total:n,edges:t,pageInfo:i}})})}forwardPaginationEntities({type:e,filter:n,sortBy:t,first:r,after:s,last:o,before:a,total:i}){if(this.isForwardPagination(r,s,o,a)){const o=this.readCursor(s).forward;return this.doFetch({filter:parseFilterInput(_extends({},n)),sortBy:parseSortByInput(_extends({},t)),limit:r,offset:o,type:e}).then(e=>e.map((e,n)=>{return{id:e.id,cursor:this.createCursor({total:i,index:n,offset:o}),node:e}}))}return[]}backwardPaginationEntities({type:e,filter:n,sortBy:t,first:r,after:s,last:o,before:a,total:i}){if(this.isBackwardPagination(r,s,o,a)){const r=this.readCursor(a).backward;return this.doFetch({filter:parseFilterInput(_extends({},n)),sortBy:parseSortByInput(_extends({},t),!0),limit:o,offset:r,type:e}).then(e=>e.map((e,n)=>{return{id:e.id,cursor:this.createCursor({total:i,index:n,offset:r,backward:!0}),node:e}}).reverse())}return[]}doFetch({type:e,filter:n,sortBy:t,offset:r,limit:s}){return this.db[e].find().where(n).sort(t).offset(r).limit(s).resultList().then(e=>e.map(e=>e.toJSON()))}getCount({type:e,filter:n}){const t=parseFilterInput(_extends({},n));return this.db[e].find().where(t).count()}getPageInfo(e,n,t,r,s,o){const a=this.readCursor(r),i=this.readCursor(o),d=a.offset>0||!1,l=a.offset+t<n||!1,c=i.offset+s<n||!1,p=i.offset>0||!1;return{startCursor:e&&e.length&&e[0].cursor||null,endCursor:e&&e.length&&e[e.length-1].cursor||null,hasPreviousPage:c||d,hasNextPage:l||p}}isForwardPagination(e,n,t,r){return!!e||!!n||!t&&!r}isBackwardPagination(e,n,t,r){return!!t||!!r}createCursor({total:e,index:n,offset:t,backward:r}){let s;return base64(`index:${s=r?e-t-n:1+t+n};total:${e};forward:${s||0};backward:${e>0&&s>0&&e-(s-1)||0}`)}readCursor(e){if(!e)return{index:0,total:0,forward:0,backward:0};{const n=unbase64(e).split(";").map(e=>e.split(":"));try{return{[n[0][0]]:parseInt(n[0][1],10),[n[1][0]]:parseInt(n[1][1],10),[n[2][0]]:parseInt(n[2][1],10),[n[3][0]]:parseInt(n[3][1],10)}}catch(e){throw new Error("invalid cursor")}}}fromGlobalId(e){return{type:e.split("/")[2],id:e}}}class BaqendMutator{constructor({db:e}){this.db=e}createEntity(e,{input:n},t){const r=n.clientMutationId,s=this.transformInput({type:e},n),o=Object.keys(s),a=new this.db[e],i=this.resolveFieldValues(e,o,s,t);return Promise.all(i).then(e=>(o.forEach((n,t)=>{a[n]=e[t]}),a.insert().then(e=>_extends({clientMutationId:r},e.toJSON()))))}updateEntity(e,{input:n},t){const r=n.clientMutationId,s=n.id,o=_objectWithoutProperties(n,["clientMutationId","id"]),a=this.transformInput({type:e},o),i=Object.keys(a),d=this.db[e].load(s),l=this.resolveFieldValues(e,i,a,t);return Promise.all([d,l]).then(e=>{var n=_slicedToArray(e,2);const t=n[0],s=n[1];return i.forEach((e,n)=>{t[e]=s[n]}),t.update().then(e=>_extends({clientMutationId:r},e.toJSON()))})}deleteEntity(e,{input:n},t){const r=n.clientMutationId,s=n.id;return this.db[e].load(s).then(e=>e.delete().then(()=>({clientMutationId:r,id:s})))}resolveFieldValues(e,n,t,r){const s=this.getReferenceTypes(e),o=[];return n.forEach(e=>{let n;if(s[e]&&s[e].elementType.reference){var r=s[e];const o=r.collectionType,a=r.elementType;n=o?this.resolveCollectionField(o,a.type,t[e]):this.resolveReferenceField(a.type,t[e])}else n="object"==typeof t[e]&&t[e].latitude&&t[e].longitude?new this.db.GeoPoint(t[e].latitude,t[e].longitude):t[e];o.push(n)}),Promise.all(o).then(e=>{if(n.length!==e.length)throw new Error("Something went wrong while creating some references");return e})}resolveReferenceField(e,n){if("string"==typeof n){const e=this.db.getReference(n);return new Promise((n,t)=>n(e))}const t=this.getDepth(n);return this.db[e].fromJSON(n).save({depth:t})}resolveCollectionField(e,n,t){return"Map"===e?this.resolveMapField(n,t):this.resolveListOrSetField(n,t)}resolveListOrSetField(e,n){return Promise.all(n.map(n=>this.resolveReferenceField(e,n)))}resolveMapField(e,n){const t=Object.keys(n).map(e=>n[e]).map(n=>this.resolveReferenceField(e,n));return Promise.all(t).then(e=>{const t=new this.db.Map;return Object.keys(n).forEach((n,r)=>{t.set(n,e[r])}),t})}addEntryToCollection(e,n,{input:t},r){let s;const o=t.clientMutationId,a=t.id;var i=this.getReferenceTypes(e)[n];const d=i.collectionType,l=i.elementType,c=this.db[e].load(a);const p=this.transformInputObject({elementType:l},"entry",t).entry;return l.reference?(s="Map"===d&&p.value||p,s=this.resolveReferenceField(l.type,s).then(e=>e.id)):s="Map"===d&&p.value||p,Promise.all([c,s]).then(e=>{var t=_slicedToArray(e,2);const r=t[0],s=t[1];let a;switch(d){case"Map":a=r.partialUpdate().put(n,p.key,s);break;case"Set":a=r.partialUpdate().add(n,s);break;default:a=r.partialUpdate().push(n,s)}return a.execute().then(e=>_extends({clientMutationId:o},e.toJSON()))})}removeEntryFromCollection(e,n,{input:t},r){const s=t.clientMutationId,o=t.id;this.getReferenceTypes(e)[n].collectionType;const a=this.getFieldInputArguments("entry",t).entry,i=a.key||a.element?a.key||a.element:a;return this.db[e].load(o).then(e=>{return e.partialUpdate().remove(n,i).execute().then(e=>_extends({clientMutationId:s},e.toJSON()))})}transformInput({type:e,basic:n},t){let r=t;if(!n&&r){const n=this.getReferenceTypes(e);Object.keys(n).forEach(e=>{r=this.transformInputObject(n[e],e,r)})}return r}transformInputObject(e,n,t){let r=t;return(r=this.getFieldInputArguments(n,r))[n]&&(r[n]=this.parseInputObject(e,r[n])),r}getFieldInputArguments(e,n){const t=n;return t&&(t[`${e}Id`]?(t[e]=t[`${e}Id`],delete t[`${e}Id`]):t[`${e}Ids`]&&(t[e]=t[`${e}Ids`],delete t[`${e}Ids`])),t}parseInputObject({collectionType:e,elementType:n},t){const r=t;if(e){if("Map"===e){const e={};return r.forEach(({key:t,value:r})=>{e[t]=this.transformInput(n,r)}),e}return r.map(e=>this.transformInput(n,e))}return r&&r.key&&r.value?{key:r.key,value:this.transformInput(n,r.value)}:this.transformInput(n,r)}getReferenceTypes(e){const n={1:"List",2:"Map",3:"Set"},t={};return this.db[e]()._metadata.type.declaredAttributes.forEach(e=>{e.type&&(e.type.isEntity||e.type.isEmbeddable)?t[e.name]={elementType:{type:e.type.name,basic:e.type.isBasic,reference:e.type.isEntity}}:e.isCollection&&(t[e.name]={collectionType:n[e.collectionType],elementType:{type:e.elementType.name,basic:e.elementType.isBasic,reference:e.elementType.isEntity}})}),t}getDepth(e,n=0){let t=n;return"object"==typeof e&&Object.keys(e).map(n=>e[n]).forEach(e=>{const r=this.getDepth(e)+1;t=Math.max(r,n)}),t}}let batchRequest=(e,n,t)=>e[n].find().where({id:{$in:t}}).resultList().then(e=>t.map(n=>e.find(e=>n===e.id).toJSON()||null)),buildDataloaders=({db:e})=>({Test:new _dataloader2.default(n=>batchRequest(e,"Test",n)),Question:new _dataloader2.default(n=>batchRequest(e,"Question",n)),Comment:new _dataloader2.default(n=>batchRequest(e,"Comment",n)),Device:new _dataloader2.default(n=>batchRequest(e,"Device",n)),TestReference:new _dataloader2.default(n=>batchRequest(e,"TestReference",n)),Post:new _dataloader2.default(n=>batchRequest(e,"Post",n)),Reference:new _dataloader2.default(n=>batchRequest(e,"Reference",n)),User:new _dataloader2.default(n=>batchRequest(e,"User",n)),Answer:new _dataloader2.default(n=>batchRequest(e,"Answer",n)),Role:new _dataloader2.default(n=>batchRequest(e,"Role",n))});const parseGeoPointLiteral=e=>{switch(e.kind){case _language.Kind.STRING:case _language.Kind.INT:return e.value;case _language.Kind.FLOAT:return parseFloat(e.value);case _language.Kind.OBJECT:{const n=Object.create(null);return e.fields.forEach(e=>{n[e.name.value]=parseGeoPointLiteral(e.value)}),n}default:return null}},typeDefs0="\n  interface Node {\n    id: ID!\n  }\n  type PageInfo {\n    endCursor: String\n    hasNextPage: Boolean!\n    hasPreviousPage: Boolean!\n    startCursor: String\n  }\n  type StringConnection {\n    total: Int\n    edges: [StringEdge]\n    pageInfo: PageInfo!\n  }\n  type StringEdge {\n    cursor: String!\n    node: String\n  }\n  type Query {\n    node(id: ID!): Node\n    nodes(ids: [ID!]!): [Node]!\n  }\n",resolvers0={Node:{__resolveType:e=>e.id.split("/")[2]},Query:{node:(e,n,{baqendResolver:t})=>t.resolveNodeQuery(n,{}),nodes:(e,n,{baqendResolver:t})=>t.resolveNodeCollectionQuery(n,{})}},typeDefs1="\n  input IDFilter {\n    eq: String\n    ne: String\n    in: [String!]\n    nin: [String!]\n    exists: Boolean\n    gt: String\n    gte: String\n    lt: String\n    lte: String\n    regex: String\n  }\n  input StringFilter {\n    eq: String\n    ne: String\n    in: [String!]\n    nin: [String!]\n    exists: Boolean\n    gt: String\n    gte: String\n    lt: String\n    lte: String\n    regex: String\n  }\n  input FloatFilter {\n    eq: Float\n    ne: Float\n    in: [Float!]\n    nin: [Float!]\n    exists: Boolean\n    gt: Float\n    gte: Float\n    lt: Float\n    lte: Float\n  }\n  input IntFilter {\n    eq: Int\n    ne: Int\n    in: [Int!]\n    nin: [Int!]\n    exists: Boolean\n    gt: Int\n    gte: Int\n    lt: Int\n    lte: Int\n  }\n  input BooleanFilter {\n    eq: Boolean\n    ne: Boolean\n    in: [Boolean!]\n    nin: [Boolean!]\n    exists: Boolean\n  }\n  input DateFilter {\n    eq: Date\n    ne: Date\n    in: [Date!]\n    nin: [Date!]\n    exists: Date\n    gt: Date\n    gte: Date\n    lt: Date\n    lte: Date\n  }\n  input JSONFilter {\n    eq: JSON\n    ne: JSON\n    in: [JSON!]\n    nin: [JSON!]\n    exists: Boolean\n  }\n\n  input GeoPointFilter {\n    nearSphere: NearSphereFilter\n  }\n  input NearSphereFilter {\n    geometry: Geometry\n    maxDistance: Float\n  }\n  input Geometry {\n    coordinates: [Float]\n    type: GeometryType\n  }\n  enum GeometryType {\n    Point\n  }\n\n  input ObjectFilter {\n    eq: String\n    ne: String\n    in: [String!]\n    nin: [String!]\n    exists: Boolean\n    gt: String\n    gte: String\n    lt: String\n    lte: String\n    regex: String\n  }\n  input CollectionFilter {\n    exists: Boolean\n  }\n  enum Direction {\n    ASC\n    DESC\n  }\n",typeDefs2="\n  scalar Date\n  scalar JSON\n  scalar GeoPoint\n",resolvers1={Date:new _graphql.GraphQLScalarType({name:"Date",description:"Date custom scalar type",serialize:identity,parseValue:parseDate,parseLiteral:parseDateLiteral}),JSON:new _graphql.GraphQLScalarType({name:"JSON",description:"`JSON` scalar type",serialize:identity,parseValue:identity,parseLiteral:parseJSONLiteral}),GeoPoint:new _graphql.GraphQLScalarType({name:"Geopoint",description:"GeoPoint scalar type",serialize:identity,parseValue:identity,parseLiteral:parseGeoPointLiteral})},typeDefs3="\n  type Test implements Node, Object {\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type Question implements Node, Object {\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    upvotes: Int\n    answers(first: Int, after: String, last: Int, before: String): AnswerConnection\n  }\n  type Comment implements Node, Object {\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    created: Date\n    parent: Comment\n    post: Post\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n  }\n  interface Object {\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n  }\n  type Device implements Node, Object {\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    deviceOs: String\n  }\n  type TestReference implements Node, Object {\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    reference: TestReference\n    map1: [StringStringMapEntry]\n    map2: [TestReferenceTestReferenceMapEntry]\n    map3: [StringTestReferenceMapEntry]\n  }\n  type Post implements Node, Object {\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    title: String\n    author: User\n    created: Date\n    url: String\n    text: String\n    type: String\n    score: Int\n    descendants: Int\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    picture: String\n  }\n  type Reference implements Node, Object {\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    text: String\n  }\n  type User implements Node, Object {\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    username: String\n    email: String\n    name: String\n    inactive: Boolean\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    posts(first: Int, after: String, last: Int, before: String): PostConnection\n    reference: Reference\n  }\n  type Embedded {\n    string: String\n  }\n  type Answer implements Node, Object {\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    upvotes: Int\n  }\n  type Role implements Node, Object {\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    name: String\n    users: [User]\n  }\n  type StringTestReferenceMapEntry {\n    key: String\n    value: TestReference\n  }\n  type StringStringMapEntry {\n    key: String\n    value: String\n  }\n  type StringEmbeddedMapEntry {\n    key: String\n    value: Embedded\n  }\n  type TestReferenceTestReferenceMapEntry {\n    key: TestReference\n    value: TestReference\n  }\n  type TestConnection {\n    total: Int\n    edges: [TestEdge]\n    pageInfo: PageInfo!\n  }\n  type TestEdge {\n    cursor: String!\n    node: Test\n  }\n  type QuestionConnection {\n    total: Int\n    edges: [QuestionEdge]\n    pageInfo: PageInfo!\n  }\n  type QuestionEdge {\n    cursor: String!\n    node: Question\n  }\n  type CommentConnection {\n    total: Int\n    edges: [CommentEdge]\n    pageInfo: PageInfo!\n  }\n  type CommentEdge {\n    cursor: String!\n    node: Comment\n  }\n  type DeviceConnection {\n    total: Int\n    edges: [DeviceEdge]\n    pageInfo: PageInfo!\n  }\n  type DeviceEdge {\n    cursor: String!\n    node: Device\n  }\n  type TestReferenceConnection {\n    total: Int\n    edges: [TestReferenceEdge]\n    pageInfo: PageInfo!\n  }\n  type TestReferenceEdge {\n    cursor: String!\n    node: TestReference\n  }\n  type PostConnection {\n    total: Int\n    edges: [PostEdge]\n    pageInfo: PageInfo!\n  }\n  type PostEdge {\n    cursor: String!\n    node: Post\n  }\n  type ReferenceConnection {\n    total: Int\n    edges: [ReferenceEdge]\n    pageInfo: PageInfo!\n  }\n  type ReferenceEdge {\n    cursor: String!\n    node: Reference\n  }\n  type UserConnection {\n    total: Int\n    edges: [UserEdge]\n    pageInfo: PageInfo!\n  }\n  type UserEdge {\n    cursor: String!\n    node: User\n  }\n  type EmbeddedConnection {\n    total: Int\n    edges: [EmbeddedEdge]\n    pageInfo: PageInfo!\n  }\n  type EmbeddedEdge {\n    cursor: String!\n    node: Embedded\n  }\n  type AnswerConnection {\n    total: Int\n    edges: [AnswerEdge]\n    pageInfo: PageInfo!\n  }\n  type AnswerEdge {\n    cursor: String!\n    node: Answer\n  }\n  type RoleConnection {\n    total: Int\n    edges: [RoleEdge]\n    pageInfo: PageInfo!\n  }\n  type RoleEdge {\n    cursor: String!\n    node: Role\n  }\n  input TestFilter {\n    or: [TestFilter!]\n    and: [TestFilter!]\n    id: IDFilter\n    version: IntFilter\n    acl: JSONFilter\n    createdAt: DateFilter\n    updatedAt: DateFilter\n    string: StringFilter\n    double: FloatFilter\n    integer: IntFilter\n    boolean: BooleanFilter\n    datetime: DateFilter\n    date: DateFilter\n    time: DateFilter\n    array: JSONFilter\n    json: JSONFilter\n    reference: ObjectFilter\n    embedded: EmbeddedFilter\n    referenceList: CollectionFilter\n    referenceSet: CollectionFilter\n    referenceMap: CollectionFilter\n    stringList: CollectionFilter\n    stringSet: CollectionFilter\n    stringMap: CollectionFilter\n    embeddedList: CollectionFilter\n    embeddedMap: CollectionFilter\n    refRefMap: CollectionFilter\n    geopoint: GeoPointFilter\n  }\n  input TestSortBy {\n    id: Direction\n    version: Direction\n    acl: Direction\n    createdAt: Direction\n    updatedAt: Direction\n    string: Direction\n    double: Direction\n    integer: Direction\n    boolean: Direction\n    datetime: Direction\n    date: Direction\n    time: Direction\n    array: Direction\n    json: Direction\n    reference: Direction\n    embedded: Direction\n    referenceList: Direction\n    referenceSet: Direction\n    referenceMap: Direction\n    stringList: Direction\n    stringSet: Direction\n    stringMap: Direction\n    embeddedList: Direction\n    embeddedMap: Direction\n    refRefMap: Direction\n    geopoint: Direction\n  }\n  input QuestionFilter {\n    or: [QuestionFilter!]\n    and: [QuestionFilter!]\n    id: IDFilter\n    version: IntFilter\n    acl: JSONFilter\n    createdAt: DateFilter\n    updatedAt: DateFilter\n    author: ObjectFilter\n    text: StringFilter\n    upvotes: IntFilter\n    answers: CollectionFilter\n  }\n  input QuestionSortBy {\n    id: Direction\n    version: Direction\n    acl: Direction\n    createdAt: Direction\n    updatedAt: Direction\n    author: Direction\n    text: Direction\n    upvotes: Direction\n    answers: Direction\n  }\n  input CommentFilter {\n    or: [CommentFilter!]\n    and: [CommentFilter!]\n    id: IDFilter\n    version: IntFilter\n    acl: JSONFilter\n    createdAt: DateFilter\n    updatedAt: DateFilter\n    author: ObjectFilter\n    text: StringFilter\n    created: DateFilter\n    parent: ObjectFilter\n    post: ObjectFilter\n    comments: CollectionFilter\n  }\n  input CommentSortBy {\n    id: Direction\n    version: Direction\n    acl: Direction\n    createdAt: Direction\n    updatedAt: Direction\n    author: Direction\n    text: Direction\n    created: Direction\n    parent: Direction\n    post: Direction\n    comments: Direction\n  }\n  input DeviceFilter {\n    or: [DeviceFilter!]\n    and: [DeviceFilter!]\n    id: IDFilter\n    version: IntFilter\n    acl: JSONFilter\n    createdAt: DateFilter\n    updatedAt: DateFilter\n    deviceOs: StringFilter\n  }\n  input DeviceSortBy {\n    id: Direction\n    version: Direction\n    acl: Direction\n    createdAt: Direction\n    updatedAt: Direction\n    deviceOs: Direction\n  }\n  input TestReferenceFilter {\n    or: [TestReferenceFilter!]\n    and: [TestReferenceFilter!]\n    id: IDFilter\n    version: IntFilter\n    acl: JSONFilter\n    createdAt: DateFilter\n    updatedAt: DateFilter\n    string: StringFilter\n    reference: ObjectFilter\n    map1: CollectionFilter\n    map2: CollectionFilter\n    map3: CollectionFilter\n  }\n  input TestReferenceSortBy {\n    id: Direction\n    version: Direction\n    acl: Direction\n    createdAt: Direction\n    updatedAt: Direction\n    string: Direction\n    reference: Direction\n    map1: Direction\n    map2: Direction\n    map3: Direction\n  }\n  input PostFilter {\n    or: [PostFilter!]\n    and: [PostFilter!]\n    id: IDFilter\n    version: IntFilter\n    acl: JSONFilter\n    createdAt: DateFilter\n    updatedAt: DateFilter\n    title: StringFilter\n    author: ObjectFilter\n    created: DateFilter\n    url: StringFilter\n    text: StringFilter\n    type: StringFilter\n    score: IntFilter\n    descendants: IntFilter\n    comments: CollectionFilter\n    picture: StringFilter\n  }\n  input PostSortBy {\n    id: Direction\n    version: Direction\n    acl: Direction\n    createdAt: Direction\n    updatedAt: Direction\n    title: Direction\n    author: Direction\n    created: Direction\n    url: Direction\n    text: Direction\n    type: Direction\n    score: Direction\n    descendants: Direction\n    comments: Direction\n    picture: Direction\n  }\n  input ReferenceFilter {\n    or: [ReferenceFilter!]\n    and: [ReferenceFilter!]\n    id: IDFilter\n    version: IntFilter\n    acl: JSONFilter\n    createdAt: DateFilter\n    updatedAt: DateFilter\n    text: StringFilter\n  }\n  input ReferenceSortBy {\n    id: Direction\n    version: Direction\n    acl: Direction\n    createdAt: Direction\n    updatedAt: Direction\n    text: Direction\n  }\n  input UserFilter {\n    or: [UserFilter!]\n    and: [UserFilter!]\n    id: IDFilter\n    version: IntFilter\n    acl: JSONFilter\n    createdAt: DateFilter\n    updatedAt: DateFilter\n    username: StringFilter\n    email: StringFilter\n    name: StringFilter\n    inactive: BooleanFilter\n    comments: CollectionFilter\n    posts: CollectionFilter\n    reference: ObjectFilter\n  }\n  input UserSortBy {\n    id: Direction\n    version: Direction\n    acl: Direction\n    createdAt: Direction\n    updatedAt: Direction\n    username: Direction\n    email: Direction\n    name: Direction\n    inactive: Direction\n    comments: Direction\n    posts: Direction\n    reference: Direction\n  }\n  input EmbeddedFilter {\n    or: [EmbeddedFilter!]\n    and: [EmbeddedFilter!]\n    string: StringFilter\n  }\n  input EmbeddedSortBy {\n    string: Direction\n  }\n  input AnswerFilter {\n    or: [AnswerFilter!]\n    and: [AnswerFilter!]\n    id: IDFilter\n    version: IntFilter\n    acl: JSONFilter\n    createdAt: DateFilter\n    updatedAt: DateFilter\n    author: ObjectFilter\n    text: StringFilter\n    upvotes: IntFilter\n  }\n  input AnswerSortBy {\n    id: Direction\n    version: Direction\n    acl: Direction\n    createdAt: Direction\n    updatedAt: Direction\n    author: Direction\n    text: Direction\n    upvotes: Direction\n  }\n  input RoleFilter {\n    or: [RoleFilter!]\n    and: [RoleFilter!]\n    id: IDFilter\n    version: IntFilter\n    acl: JSONFilter\n    createdAt: DateFilter\n    updatedAt: DateFilter\n    name: StringFilter\n    users: CollectionFilter\n  }\n  input RoleSortBy {\n    id: Direction\n    version: Direction\n    acl: Direction\n    createdAt: Direction\n    updatedAt: Direction\n    name: Direction\n    users: Direction\n  }\n  input StringTestReferenceMapInput {\n    key: String!\n    value: TestReferenceInput!\n  }\n  input StringTestReferenceMapInputIds {\n    key: String!\n    value: ID!\n  }\n  input StringStringMapInput {\n    key: String!\n    value: String!\n  }\n  input StringEmbeddedMapInput {\n    key: String!\n    value: EmbeddedInput!\n  }\n  input TestReferenceTestReferenceMapInput {\n    key: ID!\n    value: TestReferenceInput!\n  }\n  input TestReferenceTestReferenceMapInputIds {\n    key: ID!\n    value: ID!\n  }\n  input TestInput {\n    id: ID\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    referenceId: ID\n    reference: TestReferenceInput\n    embedded: EmbeddedInput\n    referenceListIds: [ID!]\n    referenceList: [TestReferenceInput!]\n    referenceSetIds: [ID!]\n    referenceSet: [TestReferenceInput!]\n    referenceMapIds: [StringTestReferenceMapInputIds!]\n    referenceMap: [StringTestReferenceMapInput!]\n    stringList: [String!]\n    stringSet: [String!]\n    stringMap: [StringStringMapInput!]\n    embeddedList: [EmbeddedInput!]\n    embeddedMap: [StringEmbeddedMapInput!]\n    refRefMapIds: [TestReferenceTestReferenceMapInputIds!]\n    refRefMap: [TestReferenceTestReferenceMapInput!]\n    geopoint: GeoPoint\n  }\n  input CreateTestInput {\n    clientMutationId: String!\n    id: ID\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    referenceId: ID\n    reference: TestReferenceInput\n    embedded: EmbeddedInput\n    referenceListIds: [ID!]\n    referenceList: [TestReferenceInput!]\n    referenceSetIds: [ID!]\n    referenceSet: [TestReferenceInput!]\n    referenceMapIds: [StringTestReferenceMapInputIds!]\n    referenceMap: [StringTestReferenceMapInput!]\n    stringList: [String!]\n    stringSet: [String!]\n    stringMap: [StringStringMapInput!]\n    embeddedList: [EmbeddedInput!]\n    embeddedMap: [StringEmbeddedMapInput!]\n    refRefMapIds: [TestReferenceTestReferenceMapInputIds!]\n    refRefMap: [TestReferenceTestReferenceMapInput!]\n    geopoint: GeoPoint\n  }\n  input UpdateTestInput {\n    clientMutationId: String!\n    id: ID!\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    referenceId: ID\n    reference: TestReferenceInput\n    embedded: EmbeddedInput\n    referenceListIds: [ID!]\n    referenceList: [TestReferenceInput!]\n    referenceSetIds: [ID!]\n    referenceSet: [TestReferenceInput!]\n    referenceMapIds: [StringTestReferenceMapInputIds!]\n    referenceMap: [StringTestReferenceMapInput!]\n    stringList: [String!]\n    stringSet: [String!]\n    stringMap: [StringStringMapInput!]\n    embeddedList: [EmbeddedInput!]\n    embeddedMap: [StringEmbeddedMapInput!]\n    refRefMapIds: [TestReferenceTestReferenceMapInputIds!]\n    refRefMap: [TestReferenceTestReferenceMapInput!]\n    geopoint: GeoPoint\n  }\n  input DeleteTestInput {\n    clientMutationId: String!\n    id: ID!\n  }\n  input AddTestReferenceToTestReferenceListInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n    entry: TestReferenceInput\n  }\n  input RemoveTestReferenceFromTestReferenceListInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n  }\n  input AddTestReferenceToTestReferenceSetInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n    entry: TestReferenceInput\n  }\n  input RemoveTestReferenceFromTestReferenceSetInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n  }\n  input AddEntryToTestReferenceMapInput {\n    clientMutationId: String!\n    id: ID!\n    entryIds: StringTestReferenceMapInputIds\n    entry: StringTestReferenceMapInput\n  }\n  input RemoveEntryFromTestReferenceMapInput {\n    clientMutationId: String!\n    id: ID!\n    entryIds: StringTestReferenceMapInputIds\n  }\n  input AddStringToTestStringListInput {\n    clientMutationId: String!\n    id: ID!\n    entry: String\n  }\n  input RemoveStringFromTestStringListInput {\n    clientMutationId: String!\n    id: ID!\n    entry: String\n  }\n  input AddStringToTestStringSetInput {\n    clientMutationId: String!\n    id: ID!\n    entry: String\n  }\n  input RemoveStringFromTestStringSetInput {\n    clientMutationId: String!\n    id: ID!\n    entry: String\n  }\n  input AddEntryToTestStringMapInput {\n    clientMutationId: String!\n    id: ID!\n    entry: StringStringMapInput\n  }\n  input RemoveEntryFromTestStringMapInput {\n    clientMutationId: String!\n    id: ID!\n    entry: StringStringMapInput\n  }\n  input AddEmbeddedToTestEmbeddedListInput {\n    clientMutationId: String!\n    id: ID!\n    entry: EmbeddedInput\n  }\n  input RemoveEmbeddedFromTestEmbeddedListInput {\n    clientMutationId: String!\n    id: ID!\n    entry: EmbeddedInput\n  }\n  input AddEntryToTestEmbeddedMapInput {\n    clientMutationId: String!\n    id: ID!\n    entry: StringEmbeddedMapInput\n  }\n  input RemoveEntryFromTestEmbeddedMapInput {\n    clientMutationId: String!\n    id: ID!\n    entry: StringEmbeddedMapInput\n  }\n  input AddEntryToTestRefRefMapInput {\n    clientMutationId: String!\n    id: ID!\n    entryIds: TestReferenceTestReferenceMapInputIds\n    entry: TestReferenceTestReferenceMapInput\n  }\n  input RemoveEntryFromTestRefRefMapInput {\n    clientMutationId: String!\n    id: ID!\n    entryIds: TestReferenceTestReferenceMapInputIds\n  }\n  input QuestionInput {\n    id: ID\n    authorId: ID\n    author: UserInput\n    text: String\n    upvotes: Int\n    answersIds: [ID!]\n    answers: [AnswerInput!]\n  }\n  input CreateQuestionInput {\n    clientMutationId: String!\n    id: ID\n    authorId: ID\n    author: UserInput\n    text: String\n    upvotes: Int\n    answersIds: [ID!]\n    answers: [AnswerInput!]\n  }\n  input UpdateQuestionInput {\n    clientMutationId: String!\n    id: ID!\n    authorId: ID\n    author: UserInput\n    text: String\n    upvotes: Int\n    answersIds: [ID!]\n    answers: [AnswerInput!]\n  }\n  input DeleteQuestionInput {\n    clientMutationId: String!\n    id: ID!\n  }\n  input AddAnswerToQuestionAnswersInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n    entry: AnswerInput\n  }\n  input RemoveAnswerFromQuestionAnswersInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n  }\n  input CommentInput {\n    id: ID\n    authorId: ID\n    author: UserInput\n    text: String\n    created: Date\n    parentId: ID\n    parent: CommentInput\n    postId: ID\n    post: PostInput\n    commentsIds: [ID!]\n    comments: [CommentInput!]\n  }\n  input CreateCommentInput {\n    clientMutationId: String!\n    id: ID\n    authorId: ID\n    author: UserInput\n    text: String\n    created: Date\n    parentId: ID\n    parent: CommentInput\n    postId: ID\n    post: PostInput\n    commentsIds: [ID!]\n    comments: [CommentInput!]\n  }\n  input UpdateCommentInput {\n    clientMutationId: String!\n    id: ID!\n    authorId: ID\n    author: UserInput\n    text: String\n    created: Date\n    parentId: ID\n    parent: CommentInput\n    postId: ID\n    post: PostInput\n    commentsIds: [ID!]\n    comments: [CommentInput!]\n  }\n  input DeleteCommentInput {\n    clientMutationId: String!\n    id: ID!\n  }\n  input AddCommentToCommentCommentsInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n    entry: CommentInput\n  }\n  input RemoveCommentFromCommentCommentsInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n  }\n  input DeviceInput {\n    id: ID\n    deviceOs: String\n  }\n  input CreateDeviceInput {\n    clientMutationId: String!\n    id: ID\n    deviceOs: String\n  }\n  input UpdateDeviceInput {\n    clientMutationId: String!\n    id: ID!\n    deviceOs: String\n  }\n  input DeleteDeviceInput {\n    clientMutationId: String!\n    id: ID!\n  }\n  input TestReferenceInput {\n    id: ID\n    string: String\n    referenceId: ID\n    reference: TestReferenceInput\n    map1: [StringStringMapInput!]\n    map2Ids: [TestReferenceTestReferenceMapInputIds!]\n    map2: [TestReferenceTestReferenceMapInput!]\n    map3Ids: [StringTestReferenceMapInputIds!]\n    map3: [StringTestReferenceMapInput!]\n  }\n  input CreateTestReferenceInput {\n    clientMutationId: String!\n    id: ID\n    string: String\n    referenceId: ID\n    reference: TestReferenceInput\n    map1: [StringStringMapInput!]\n    map2Ids: [TestReferenceTestReferenceMapInputIds!]\n    map2: [TestReferenceTestReferenceMapInput!]\n    map3Ids: [StringTestReferenceMapInputIds!]\n    map3: [StringTestReferenceMapInput!]\n  }\n  input UpdateTestReferenceInput {\n    clientMutationId: String!\n    id: ID!\n    string: String\n    referenceId: ID\n    reference: TestReferenceInput\n    map1: [StringStringMapInput!]\n    map2Ids: [TestReferenceTestReferenceMapInputIds!]\n    map2: [TestReferenceTestReferenceMapInput!]\n    map3Ids: [StringTestReferenceMapInputIds!]\n    map3: [StringTestReferenceMapInput!]\n  }\n  input DeleteTestReferenceInput {\n    clientMutationId: String!\n    id: ID!\n  }\n  input AddEntryToTestReferenceMap1Input {\n    clientMutationId: String!\n    id: ID!\n    entry: StringStringMapInput\n  }\n  input RemoveEntryFromTestReferenceMap1Input {\n    clientMutationId: String!\n    id: ID!\n    entry: StringStringMapInput\n  }\n  input AddEntryToTestReferenceMap2Input {\n    clientMutationId: String!\n    id: ID!\n    entryIds: TestReferenceTestReferenceMapInputIds\n    entry: TestReferenceTestReferenceMapInput\n  }\n  input RemoveEntryFromTestReferenceMap2Input {\n    clientMutationId: String!\n    id: ID!\n    entryIds: TestReferenceTestReferenceMapInputIds\n  }\n  input AddEntryToTestReferenceMap3Input {\n    clientMutationId: String!\n    id: ID!\n    entryIds: StringTestReferenceMapInputIds\n    entry: StringTestReferenceMapInput\n  }\n  input RemoveEntryFromTestReferenceMap3Input {\n    clientMutationId: String!\n    id: ID!\n    entryIds: StringTestReferenceMapInputIds\n  }\n  input PostInput {\n    id: ID\n    title: String\n    authorId: ID\n    author: UserInput\n    created: Date\n    url: String\n    text: String\n    type: String\n    score: Int\n    descendants: Int\n    commentsIds: [ID!]\n    comments: [CommentInput!]\n    picture: String\n  }\n  input CreatePostInput {\n    clientMutationId: String!\n    id: ID\n    title: String\n    authorId: ID\n    author: UserInput\n    created: Date\n    url: String\n    text: String\n    type: String\n    score: Int\n    descendants: Int\n    commentsIds: [ID!]\n    comments: [CommentInput!]\n    picture: String\n  }\n  input UpdatePostInput {\n    clientMutationId: String!\n    id: ID!\n    title: String\n    authorId: ID\n    author: UserInput\n    created: Date\n    url: String\n    text: String\n    type: String\n    score: Int\n    descendants: Int\n    commentsIds: [ID!]\n    comments: [CommentInput!]\n    picture: String\n  }\n  input DeletePostInput {\n    clientMutationId: String!\n    id: ID!\n  }\n  input AddCommentToPostCommentsInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n    entry: CommentInput\n  }\n  input RemoveCommentFromPostCommentsInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n  }\n  input ReferenceInput {\n    id: ID\n    text: String\n  }\n  input CreateReferenceInput {\n    clientMutationId: String!\n    id: ID\n    text: String\n  }\n  input UpdateReferenceInput {\n    clientMutationId: String!\n    id: ID!\n    text: String\n  }\n  input DeleteReferenceInput {\n    clientMutationId: String!\n    id: ID!\n  }\n  input UserInput {\n    id: ID\n    username: String\n    email: String\n    name: String\n    inactive: Boolean\n    commentsIds: [ID!]\n    comments: [CommentInput!]\n    postsIds: [ID!]\n    posts: [PostInput!]\n    referenceId: ID\n    reference: ReferenceInput\n  }\n  input CreateUserInput {\n    clientMutationId: String!\n    id: ID\n    username: String\n    email: String\n    name: String\n    inactive: Boolean\n    commentsIds: [ID!]\n    comments: [CommentInput!]\n    postsIds: [ID!]\n    posts: [PostInput!]\n    referenceId: ID\n    reference: ReferenceInput\n  }\n  input UpdateUserInput {\n    clientMutationId: String!\n    id: ID!\n    username: String\n    email: String\n    name: String\n    inactive: Boolean\n    commentsIds: [ID!]\n    comments: [CommentInput!]\n    postsIds: [ID!]\n    posts: [PostInput!]\n    referenceId: ID\n    reference: ReferenceInput\n  }\n  input DeleteUserInput {\n    clientMutationId: String!\n    id: ID!\n  }\n  input AddCommentToUserCommentsInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n    entry: CommentInput\n  }\n  input RemoveCommentFromUserCommentsInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n  }\n  input AddPostToUserPostsInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n    entry: PostInput\n  }\n  input RemovePostFromUserPostsInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n  }\n  input EmbeddedInput {\n    string: String\n  }\n  input AnswerInput {\n    id: ID\n    authorId: ID\n    author: UserInput\n    text: String\n    upvotes: Int\n  }\n  input CreateAnswerInput {\n    clientMutationId: String!\n    id: ID\n    authorId: ID\n    author: UserInput\n    text: String\n    upvotes: Int\n  }\n  input UpdateAnswerInput {\n    clientMutationId: String!\n    id: ID!\n    authorId: ID\n    author: UserInput\n    text: String\n    upvotes: Int\n  }\n  input DeleteAnswerInput {\n    clientMutationId: String!\n    id: ID!\n  }\n  input RoleInput {\n    id: ID\n    name: String\n    usersIds: [ID!]\n    users: [UserInput!]\n  }\n  input CreateRoleInput {\n    clientMutationId: String!\n    id: ID\n    name: String\n    usersIds: [ID!]\n    users: [UserInput!]\n  }\n  input UpdateRoleInput {\n    clientMutationId: String!\n    id: ID!\n    name: String\n    usersIds: [ID!]\n    users: [UserInput!]\n  }\n  input DeleteRoleInput {\n    clientMutationId: String!\n    id: ID!\n  }\n  input AddUserToRoleUsersInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n    entry: UserInput\n  }\n  input RemoveUserFromRoleUsersInput {\n    clientMutationId: String!\n    id: ID!\n    entryId: ID\n  }\n  type CreateTestPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type UpdateTestPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type DeleteTestPayload {\n    clientMutationId: String!\n    id: ID!\n  }\n  type AddTestReferenceToTestReferenceListPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type RemoveTestReferenceFromTestReferenceListPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type AddTestReferenceToTestReferenceSetPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type RemoveTestReferenceFromTestReferenceSetPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type AddEntryToTestReferenceMapPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type RemoveEntryFromTestReferenceMapPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type AddStringToTestStringListPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type RemoveStringFromTestStringListPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type AddStringToTestStringSetPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type RemoveStringFromTestStringSetPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type AddEntryToTestStringMapPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type RemoveEntryFromTestStringMapPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type AddEmbeddedToTestEmbeddedListPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type RemoveEmbeddedFromTestEmbeddedListPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type AddEntryToTestEmbeddedMapPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type RemoveEntryFromTestEmbeddedMapPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type AddEntryToTestRefRefMapPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type RemoveEntryFromTestRefRefMapPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    double: Float\n    integer: Int\n    boolean: Boolean\n    datetime: Date\n    date: Date\n    time: Date\n    array: JSON\n    json: JSON\n    reference: TestReference\n    embedded: Embedded\n    referenceList(first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    referenceSet: [TestReference]\n    referenceMap: [StringTestReferenceMapEntry]\n    stringList(first: Int, after: String, last: Int, before: String): StringConnection\n    stringSet: [String]\n    stringMap: [StringStringMapEntry]\n    embeddedList(first: Int, after: String, last: Int, before: String): EmbeddedConnection\n    embeddedMap: [StringEmbeddedMapEntry]\n    refRefMap: [TestReferenceTestReferenceMapEntry]\n    geopoint: GeoPoint\n  }\n  type CreateQuestionPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    upvotes: Int\n    answers(first: Int, after: String, last: Int, before: String): AnswerConnection\n  }\n  type UpdateQuestionPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    upvotes: Int\n    answers(first: Int, after: String, last: Int, before: String): AnswerConnection\n  }\n  type DeleteQuestionPayload {\n    clientMutationId: String!\n    id: ID!\n  }\n  type AddAnswerToQuestionAnswersPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    upvotes: Int\n    answers(first: Int, after: String, last: Int, before: String): AnswerConnection\n  }\n  type RemoveAnswerFromQuestionAnswersPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    upvotes: Int\n    answers(first: Int, after: String, last: Int, before: String): AnswerConnection\n  }\n  type CreateCommentPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    created: Date\n    parent: Comment\n    post: Post\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n  }\n  type UpdateCommentPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    created: Date\n    parent: Comment\n    post: Post\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n  }\n  type DeleteCommentPayload {\n    clientMutationId: String!\n    id: ID!\n  }\n  type AddCommentToCommentCommentsPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    created: Date\n    parent: Comment\n    post: Post\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n  }\n  type RemoveCommentFromCommentCommentsPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    created: Date\n    parent: Comment\n    post: Post\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n  }\n  type CreateDevicePayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    deviceOs: String\n  }\n  type UpdateDevicePayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    deviceOs: String\n  }\n  type DeleteDevicePayload {\n    clientMutationId: String!\n    id: ID!\n  }\n  type CreateTestReferencePayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    reference: TestReference\n    map1: [StringStringMapEntry]\n    map2: [TestReferenceTestReferenceMapEntry]\n    map3: [StringTestReferenceMapEntry]\n  }\n  type UpdateTestReferencePayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    reference: TestReference\n    map1: [StringStringMapEntry]\n    map2: [TestReferenceTestReferenceMapEntry]\n    map3: [StringTestReferenceMapEntry]\n  }\n  type DeleteTestReferencePayload {\n    clientMutationId: String!\n    id: ID!\n  }\n  type AddEntryToTestReferenceMap1Payload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    reference: TestReference\n    map1: [StringStringMapEntry]\n    map2: [TestReferenceTestReferenceMapEntry]\n    map3: [StringTestReferenceMapEntry]\n  }\n  type RemoveEntryFromTestReferenceMap1Payload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    reference: TestReference\n    map1: [StringStringMapEntry]\n    map2: [TestReferenceTestReferenceMapEntry]\n    map3: [StringTestReferenceMapEntry]\n  }\n  type AddEntryToTestReferenceMap2Payload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    reference: TestReference\n    map1: [StringStringMapEntry]\n    map2: [TestReferenceTestReferenceMapEntry]\n    map3: [StringTestReferenceMapEntry]\n  }\n  type RemoveEntryFromTestReferenceMap2Payload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    reference: TestReference\n    map1: [StringStringMapEntry]\n    map2: [TestReferenceTestReferenceMapEntry]\n    map3: [StringTestReferenceMapEntry]\n  }\n  type AddEntryToTestReferenceMap3Payload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    reference: TestReference\n    map1: [StringStringMapEntry]\n    map2: [TestReferenceTestReferenceMapEntry]\n    map3: [StringTestReferenceMapEntry]\n  }\n  type RemoveEntryFromTestReferenceMap3Payload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    string: String\n    reference: TestReference\n    map1: [StringStringMapEntry]\n    map2: [TestReferenceTestReferenceMapEntry]\n    map3: [StringTestReferenceMapEntry]\n  }\n  type CreatePostPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    title: String\n    author: User\n    created: Date\n    url: String\n    text: String\n    type: String\n    score: Int\n    descendants: Int\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    picture: String\n  }\n  type UpdatePostPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    title: String\n    author: User\n    created: Date\n    url: String\n    text: String\n    type: String\n    score: Int\n    descendants: Int\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    picture: String\n  }\n  type DeletePostPayload {\n    clientMutationId: String!\n    id: ID!\n  }\n  type AddCommentToPostCommentsPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    title: String\n    author: User\n    created: Date\n    url: String\n    text: String\n    type: String\n    score: Int\n    descendants: Int\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    picture: String\n  }\n  type RemoveCommentFromPostCommentsPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    title: String\n    author: User\n    created: Date\n    url: String\n    text: String\n    type: String\n    score: Int\n    descendants: Int\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    picture: String\n  }\n  type CreateReferencePayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    text: String\n  }\n  type UpdateReferencePayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    text: String\n  }\n  type DeleteReferencePayload {\n    clientMutationId: String!\n    id: ID!\n  }\n  type CreateUserPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    username: String\n    email: String\n    name: String\n    inactive: Boolean\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    posts(first: Int, after: String, last: Int, before: String): PostConnection\n    reference: Reference\n  }\n  type UpdateUserPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    username: String\n    email: String\n    name: String\n    inactive: Boolean\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    posts(first: Int, after: String, last: Int, before: String): PostConnection\n    reference: Reference\n  }\n  type DeleteUserPayload {\n    clientMutationId: String!\n    id: ID!\n  }\n  type AddCommentToUserCommentsPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    username: String\n    email: String\n    name: String\n    inactive: Boolean\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    posts(first: Int, after: String, last: Int, before: String): PostConnection\n    reference: Reference\n  }\n  type RemoveCommentFromUserCommentsPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    username: String\n    email: String\n    name: String\n    inactive: Boolean\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    posts(first: Int, after: String, last: Int, before: String): PostConnection\n    reference: Reference\n  }\n  type AddPostToUserPostsPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    username: String\n    email: String\n    name: String\n    inactive: Boolean\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    posts(first: Int, after: String, last: Int, before: String): PostConnection\n    reference: Reference\n  }\n  type RemovePostFromUserPostsPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    username: String\n    email: String\n    name: String\n    inactive: Boolean\n    comments(first: Int, after: String, last: Int, before: String): CommentConnection\n    posts(first: Int, after: String, last: Int, before: String): PostConnection\n    reference: Reference\n  }\n  type CreateAnswerPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    upvotes: Int\n  }\n  type UpdateAnswerPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    author: User\n    text: String\n    upvotes: Int\n  }\n  type DeleteAnswerPayload {\n    clientMutationId: String!\n    id: ID!\n  }\n  type CreateRolePayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    name: String\n    users: [User]\n  }\n  type UpdateRolePayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    name: String\n    users: [User]\n  }\n  type DeleteRolePayload {\n    clientMutationId: String!\n    id: ID!\n  }\n  type AddUserToRoleUsersPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    name: String\n    users: [User]\n  }\n  type RemoveUserFromRoleUsersPayload {\n    clientMutationId: String!\n    id: ID!\n    version: Int\n    acl: JSON\n    createdAt: Date\n    updatedAt: Date\n    name: String\n    users: [User]\n  }\n  extend type Query {\n    Test(id: ID!): Test\n    allTests(filter: TestFilter, sortBy: TestSortBy, first: Int, after: String, last: Int, before: String): TestConnection\n    Question(id: ID!): Question\n    allQuestions(filter: QuestionFilter, sortBy: QuestionSortBy, first: Int, after: String, last: Int, before: String): QuestionConnection\n    Comment(id: ID!): Comment\n    allComments(filter: CommentFilter, sortBy: CommentSortBy, first: Int, after: String, last: Int, before: String): CommentConnection\n    Device(id: ID!): Device\n    allDevices(filter: DeviceFilter, sortBy: DeviceSortBy, first: Int, after: String, last: Int, before: String): DeviceConnection\n    TestReference(id: ID!): TestReference\n    allTestReferences(filter: TestReferenceFilter, sortBy: TestReferenceSortBy, first: Int, after: String, last: Int, before: String): TestReferenceConnection\n    Post(id: ID!): Post\n    allPosts(filter: PostFilter, sortBy: PostSortBy, first: Int, after: String, last: Int, before: String): PostConnection\n    Reference(id: ID!): Reference\n    allReferences(filter: ReferenceFilter, sortBy: ReferenceSortBy, first: Int, after: String, last: Int, before: String): ReferenceConnection\n    User(id: ID!): User\n    allUsers(filter: UserFilter, sortBy: UserSortBy, first: Int, after: String, last: Int, before: String): UserConnection\n    Answer(id: ID!): Answer\n    allAnswers(filter: AnswerFilter, sortBy: AnswerSortBy, first: Int, after: String, last: Int, before: String): AnswerConnection\n    Role(id: ID!): Role\n    allRoles(filter: RoleFilter, sortBy: RoleSortBy, first: Int, after: String, last: Int, before: String): RoleConnection\n  }\n  type Mutation {\n    createTest(input: CreateTestInput): CreateTestPayload\n    updateTest(input: UpdateTestInput): UpdateTestPayload\n    deleteTest(input: DeleteTestInput): DeleteTestPayload\n    addTestReferenceToTestReferenceList(input: AddTestReferenceToTestReferenceListInput): AddTestReferenceToTestReferenceListPayload\n    removeTestReferenceFromTestReferenceList(input: RemoveTestReferenceFromTestReferenceListInput): RemoveTestReferenceFromTestReferenceListPayload\n    addTestReferenceToTestReferenceSet(input: AddTestReferenceToTestReferenceSetInput): AddTestReferenceToTestReferenceSetPayload\n    removeTestReferenceFromTestReferenceSet(input: RemoveTestReferenceFromTestReferenceSetInput): RemoveTestReferenceFromTestReferenceSetPayload\n    addEntryToTestReferenceMap(input: AddEntryToTestReferenceMapInput): AddEntryToTestReferenceMapPayload\n    removeEntryFromTestReferenceMap(input: RemoveEntryFromTestReferenceMapInput): RemoveEntryFromTestReferenceMapPayload\n    addStringToTestStringList(input: AddStringToTestStringListInput): AddStringToTestStringListPayload\n    removeStringFromTestStringList(input: RemoveStringFromTestStringListInput): RemoveStringFromTestStringListPayload\n    addStringToTestStringSet(input: AddStringToTestStringSetInput): AddStringToTestStringSetPayload\n    removeStringFromTestStringSet(input: RemoveStringFromTestStringSetInput): RemoveStringFromTestStringSetPayload\n    addEntryToTestStringMap(input: AddEntryToTestStringMapInput): AddEntryToTestStringMapPayload\n    removeEntryFromTestStringMap(input: RemoveEntryFromTestStringMapInput): RemoveEntryFromTestStringMapPayload\n    addEmbeddedToTestEmbeddedList(input: AddEmbeddedToTestEmbeddedListInput): AddEmbeddedToTestEmbeddedListPayload\n    removeEmbeddedFromTestEmbeddedList(input: RemoveEmbeddedFromTestEmbeddedListInput): RemoveEmbeddedFromTestEmbeddedListPayload\n    addEntryToTestEmbeddedMap(input: AddEntryToTestEmbeddedMapInput): AddEntryToTestEmbeddedMapPayload\n    removeEntryFromTestEmbeddedMap(input: RemoveEntryFromTestEmbeddedMapInput): RemoveEntryFromTestEmbeddedMapPayload\n    addEntryToTestRefRefMap(input: AddEntryToTestRefRefMapInput): AddEntryToTestRefRefMapPayload\n    removeEntryFromTestRefRefMap(input: RemoveEntryFromTestRefRefMapInput): RemoveEntryFromTestRefRefMapPayload\n    createQuestion(input: CreateQuestionInput): CreateQuestionPayload\n    updateQuestion(input: UpdateQuestionInput): UpdateQuestionPayload\n    deleteQuestion(input: DeleteQuestionInput): DeleteQuestionPayload\n    addAnswerToQuestionAnswers(input: AddAnswerToQuestionAnswersInput): AddAnswerToQuestionAnswersPayload\n    removeAnswerFromQuestionAnswers(input: RemoveAnswerFromQuestionAnswersInput): RemoveAnswerFromQuestionAnswersPayload\n    createComment(input: CreateCommentInput): CreateCommentPayload\n    updateComment(input: UpdateCommentInput): UpdateCommentPayload\n    deleteComment(input: DeleteCommentInput): DeleteCommentPayload\n    addCommentToCommentComments(input: AddCommentToCommentCommentsInput): AddCommentToCommentCommentsPayload\n    removeCommentFromCommentComments(input: RemoveCommentFromCommentCommentsInput): RemoveCommentFromCommentCommentsPayload\n    createDevice(input: CreateDeviceInput): CreateDevicePayload\n    updateDevice(input: UpdateDeviceInput): UpdateDevicePayload\n    deleteDevice(input: DeleteDeviceInput): DeleteDevicePayload\n    createTestReference(input: CreateTestReferenceInput): CreateTestReferencePayload\n    updateTestReference(input: UpdateTestReferenceInput): UpdateTestReferencePayload\n    deleteTestReference(input: DeleteTestReferenceInput): DeleteTestReferencePayload\n    addEntryToTestReferenceMap1(input: AddEntryToTestReferenceMap1Input): AddEntryToTestReferenceMap1Payload\n    removeEntryFromTestReferenceMap1(input: RemoveEntryFromTestReferenceMap1Input): RemoveEntryFromTestReferenceMap1Payload\n    addEntryToTestReferenceMap2(input: AddEntryToTestReferenceMap2Input): AddEntryToTestReferenceMap2Payload\n    removeEntryFromTestReferenceMap2(input: RemoveEntryFromTestReferenceMap2Input): RemoveEntryFromTestReferenceMap2Payload\n    addEntryToTestReferenceMap3(input: AddEntryToTestReferenceMap3Input): AddEntryToTestReferenceMap3Payload\n    removeEntryFromTestReferenceMap3(input: RemoveEntryFromTestReferenceMap3Input): RemoveEntryFromTestReferenceMap3Payload\n    createPost(input: CreatePostInput): CreatePostPayload\n    updatePost(input: UpdatePostInput): UpdatePostPayload\n    deletePost(input: DeletePostInput): DeletePostPayload\n    addCommentToPostComments(input: AddCommentToPostCommentsInput): AddCommentToPostCommentsPayload\n    removeCommentFromPostComments(input: RemoveCommentFromPostCommentsInput): RemoveCommentFromPostCommentsPayload\n    createReference(input: CreateReferenceInput): CreateReferencePayload\n    updateReference(input: UpdateReferenceInput): UpdateReferencePayload\n    deleteReference(input: DeleteReferenceInput): DeleteReferencePayload\n    createUser(input: CreateUserInput): CreateUserPayload\n    updateUser(input: UpdateUserInput): UpdateUserPayload\n    deleteUser(input: DeleteUserInput): DeleteUserPayload\n    addCommentToUserComments(input: AddCommentToUserCommentsInput): AddCommentToUserCommentsPayload\n    removeCommentFromUserComments(input: RemoveCommentFromUserCommentsInput): RemoveCommentFromUserCommentsPayload\n    addPostToUserPosts(input: AddPostToUserPostsInput): AddPostToUserPostsPayload\n    removePostFromUserPosts(input: RemovePostFromUserPostsInput): RemovePostFromUserPostsPayload\n    createAnswer(input: CreateAnswerInput): CreateAnswerPayload\n    updateAnswer(input: UpdateAnswerInput): UpdateAnswerPayload\n    deleteAnswer(input: DeleteAnswerInput): DeleteAnswerPayload\n    createRole(input: CreateRoleInput): CreateRolePayload\n    updateRole(input: UpdateRoleInput): UpdateRolePayload\n    deleteRole(input: DeleteRoleInput): DeleteRolePayload\n    addUserToRoleUsers(input: AddUserToRoleUsersInput): AddUserToRoleUsersPayload\n    removeUserFromRoleUsers(input: RemoveUserFromRoleUsersInput): RemoveUserFromRoleUsersPayload\n  }\n",resolvers2={Test:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},Question:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),answers:({answers:e},n,{baqendResolver:t})=>t.resolveReferenceList("Answer",e,n)},Comment:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),parent:({parent:e},n,{baqendResolver:t})=>t.resolveReference("Comment",e,n),post:({post:e},n,{baqendResolver:t})=>t.resolveReference("Post",e,n),comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n)},TestReference:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),map1:({map1:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),map2:({map2:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n),map3:({map3:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n)},Post:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n)},User:{comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n),posts:({posts:e},n,{baqendResolver:t})=>t.resolveReferenceList("Post",e,n),reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("Reference",e,n)},Answer:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n)},Role:{users:({users:e},n,{baqendResolver:t})=>t.resolveReferenceSet("User",e,n)},TestConnection:{edges:({edges:e},n,{baqendResolver:t})=>e,pageInfo:({pageInfo:e},n,{baqendResolver:t})=>e},TestEdge:{cursor:({cursor:e},n,{baqendResolver:t})=>e,node:({node:e},n,{baqendResolver:t})=>e},QuestionConnection:{edges:({edges:e},n,{baqendResolver:t})=>e,pageInfo:({pageInfo:e},n,{baqendResolver:t})=>e},QuestionEdge:{cursor:({cursor:e},n,{baqendResolver:t})=>e,node:({node:e},n,{baqendResolver:t})=>e},CommentConnection:{edges:({edges:e},n,{baqendResolver:t})=>e,pageInfo:({pageInfo:e},n,{baqendResolver:t})=>e},CommentEdge:{cursor:({cursor:e},n,{baqendResolver:t})=>e,node:({node:e},n,{baqendResolver:t})=>e},DeviceConnection:{edges:({edges:e},n,{baqendResolver:t})=>e,pageInfo:({pageInfo:e},n,{baqendResolver:t})=>e},DeviceEdge:{cursor:({cursor:e},n,{baqendResolver:t})=>e,node:({node:e},n,{baqendResolver:t})=>e},TestReferenceConnection:{edges:({edges:e},n,{baqendResolver:t})=>e,pageInfo:({pageInfo:e},n,{baqendResolver:t})=>e},TestReferenceEdge:{cursor:({cursor:e},n,{baqendResolver:t})=>e,node:({node:e},n,{baqendResolver:t})=>e},PostConnection:{edges:({edges:e},n,{baqendResolver:t})=>e,pageInfo:({pageInfo:e},n,{baqendResolver:t})=>e},PostEdge:{cursor:({cursor:e},n,{baqendResolver:t})=>e,node:({node:e},n,{baqendResolver:t})=>e},ReferenceConnection:{edges:({edges:e},n,{baqendResolver:t})=>e,pageInfo:({pageInfo:e},n,{baqendResolver:t})=>e},ReferenceEdge:{cursor:({cursor:e},n,{baqendResolver:t})=>e,node:({node:e},n,{baqendResolver:t})=>e},UserConnection:{edges:({edges:e},n,{baqendResolver:t})=>e,pageInfo:({pageInfo:e},n,{baqendResolver:t})=>e},UserEdge:{cursor:({cursor:e},n,{baqendResolver:t})=>e,node:({node:e},n,{baqendResolver:t})=>e},EmbeddedConnection:{edges:({edges:e},n,{baqendResolver:t})=>e,pageInfo:({pageInfo:e},n,{baqendResolver:t})=>e},EmbeddedEdge:{cursor:({cursor:e},n,{baqendResolver:t})=>e,node:({node:e},n,{baqendResolver:t})=>e},AnswerConnection:{edges:({edges:e},n,{baqendResolver:t})=>e,pageInfo:({pageInfo:e},n,{baqendResolver:t})=>e},AnswerEdge:{cursor:({cursor:e},n,{baqendResolver:t})=>e,node:({node:e},n,{baqendResolver:t})=>e},RoleConnection:{edges:({edges:e},n,{baqendResolver:t})=>e,pageInfo:({pageInfo:e},n,{baqendResolver:t})=>e},RoleEdge:{cursor:({cursor:e},n,{baqendResolver:t})=>e,node:({node:e},n,{baqendResolver:t})=>e},CreateTestPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},UpdateTestPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},AddTestReferenceToTestReferenceListPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},RemoveTestReferenceFromTestReferenceListPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},AddTestReferenceToTestReferenceSetPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},RemoveTestReferenceFromTestReferenceSetPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},AddEntryToTestReferenceMapPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},RemoveEntryFromTestReferenceMapPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},AddStringToTestStringListPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},RemoveStringFromTestStringListPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},AddStringToTestStringSetPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},RemoveStringFromTestStringSetPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},AddEntryToTestStringMapPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},RemoveEntryFromTestStringMapPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},AddEmbeddedToTestEmbeddedListPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},RemoveEmbeddedFromTestEmbeddedListPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},AddEntryToTestEmbeddedMapPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},RemoveEntryFromTestEmbeddedMapPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},AddEntryToTestRefRefMapPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},RemoveEntryFromTestRefRefMapPayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),embedded:({embedded:e},n,{baqendResolver:t})=>e,referenceList:({referenceList:e},n,{baqendResolver:t})=>t.resolveReferenceList("TestReference",e,n),referenceSet:({referenceSet:e},n,{baqendResolver:t})=>t.resolveReferenceSet("TestReference",e,n),referenceMap:({referenceMap:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n),stringList:({stringList:e},n,{baqendResolver:t})=>t.resolveList(e,n),stringSet:({stringSet:e},n,{baqendResolver:t})=>t.resolveSet(e,n),stringMap:({stringMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),embeddedList:({embeddedList:e},n,{baqendResolver:t})=>t.resolveList(e,n),embeddedMap:({embeddedMap:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),refRefMap:({refRefMap:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n)},CreateQuestionPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),answers:({answers:e},n,{baqendResolver:t})=>t.resolveReferenceList("Answer",e,n)},UpdateQuestionPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),answers:({answers:e},n,{baqendResolver:t})=>t.resolveReferenceList("Answer",e,n)},AddAnswerToQuestionAnswersPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),answers:({answers:e},n,{baqendResolver:t})=>t.resolveReferenceList("Answer",e,n)},RemoveAnswerFromQuestionAnswersPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),answers:({answers:e},n,{baqendResolver:t})=>t.resolveReferenceList("Answer",e,n)},CreateCommentPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),parent:({parent:e},n,{baqendResolver:t})=>t.resolveReference("Comment",e,n),post:({post:e},n,{baqendResolver:t})=>t.resolveReference("Post",e,n),comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n)},UpdateCommentPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),parent:({parent:e},n,{baqendResolver:t})=>t.resolveReference("Comment",e,n),post:({post:e},n,{baqendResolver:t})=>t.resolveReference("Post",e,n),comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n)},AddCommentToCommentCommentsPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),parent:({parent:e},n,{baqendResolver:t})=>t.resolveReference("Comment",e,n),post:({post:e},n,{baqendResolver:t})=>t.resolveReference("Post",e,n),comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n)},RemoveCommentFromCommentCommentsPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),parent:({parent:e},n,{baqendResolver:t})=>t.resolveReference("Comment",e,n),post:({post:e},n,{baqendResolver:t})=>t.resolveReference("Post",e,n),comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n)},CreateTestReferencePayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),map1:({map1:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),map2:({map2:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n),map3:({map3:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n)},UpdateTestReferencePayload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),map1:({map1:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),map2:({map2:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n),map3:({map3:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n)},AddEntryToTestReferenceMap1Payload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),map1:({map1:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),map2:({map2:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n),map3:({map3:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n)},RemoveEntryFromTestReferenceMap1Payload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),map1:({map1:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),map2:({map2:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n),map3:({map3:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n)},AddEntryToTestReferenceMap2Payload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),map1:({map1:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),map2:({map2:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n),map3:({map3:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n)},RemoveEntryFromTestReferenceMap2Payload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),map1:({map1:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),map2:({map2:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n),map3:({map3:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n)},AddEntryToTestReferenceMap3Payload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),map1:({map1:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),map2:({map2:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n),map3:({map3:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n)},RemoveEntryFromTestReferenceMap3Payload:{reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("TestReference",e,n),map1:({map1:e},n,{baqendResolver:t})=>t.resolveMap([null,null],e,n),map2:({map2:e},n,{baqendResolver:t})=>t.resolveMap(["TestReference","TestReference"],e,n),map3:({map3:e},n,{baqendResolver:t})=>t.resolveMap([null,"TestReference"],e,n)},CreatePostPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n)},UpdatePostPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n)},AddCommentToPostCommentsPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n)},RemoveCommentFromPostCommentsPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n),comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n)},CreateUserPayload:{comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n),posts:({posts:e},n,{baqendResolver:t})=>t.resolveReferenceList("Post",e,n),reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("Reference",e,n)},UpdateUserPayload:{comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n),posts:({posts:e},n,{baqendResolver:t})=>t.resolveReferenceList("Post",e,n),reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("Reference",e,n)},AddCommentToUserCommentsPayload:{comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n),posts:({posts:e},n,{baqendResolver:t})=>t.resolveReferenceList("Post",e,n),reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("Reference",e,n)},RemoveCommentFromUserCommentsPayload:{comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n),posts:({posts:e},n,{baqendResolver:t})=>t.resolveReferenceList("Post",e,n),reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("Reference",e,n)},AddPostToUserPostsPayload:{comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n),posts:({posts:e},n,{baqendResolver:t})=>t.resolveReferenceList("Post",e,n),reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("Reference",e,n)},RemovePostFromUserPostsPayload:{comments:({comments:e},n,{baqendResolver:t})=>t.resolveReferenceList("Comment",e,n),posts:({posts:e},n,{baqendResolver:t})=>t.resolveReferenceList("Post",e,n),reference:({reference:e},n,{baqendResolver:t})=>t.resolveReference("Reference",e,n)},CreateAnswerPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n)},UpdateAnswerPayload:{author:({author:e},n,{baqendResolver:t})=>t.resolveReference("User",e,n)},CreateRolePayload:{users:({users:e},n,{baqendResolver:t})=>t.resolveReferenceSet("User",e,n)},UpdateRolePayload:{users:({users:e},n,{baqendResolver:t})=>t.resolveReferenceSet("User",e,n)},AddUserToRoleUsersPayload:{users:({users:e},n,{baqendResolver:t})=>t.resolveReferenceSet("User",e,n)},RemoveUserFromRoleUsersPayload:{users:({users:e},n,{baqendResolver:t})=>t.resolveReferenceSet("User",e,n)},Query:{Test:(e,n,{baqendResolver:t})=>t.resolveReferenceQuery("Test",n,{}),allTests:(e,n,{baqendResolver:t})=>t.resolveReferenceCollectionQuery("Test",n,{}),Question:(e,n,{baqendResolver:t})=>t.resolveReferenceQuery("Question",n,{}),allQuestions:(e,n,{baqendResolver:t})=>t.resolveReferenceCollectionQuery("Question",n,{}),Comment:(e,n,{baqendResolver:t})=>t.resolveReferenceQuery("Comment",n,{}),allComments:(e,n,{baqendResolver:t})=>t.resolveReferenceCollectionQuery("Comment",n,{}),Device:(e,n,{baqendResolver:t})=>t.resolveReferenceQuery("Device",n,{}),allDevices:(e,n,{baqendResolver:t})=>t.resolveReferenceCollectionQuery("Device",n,{}),TestReference:(e,n,{baqendResolver:t})=>t.resolveReferenceQuery("TestReference",n,{}),allTestReferences:(e,n,{baqendResolver:t})=>t.resolveReferenceCollectionQuery("TestReference",n,{}),Post:(e,n,{baqendResolver:t})=>t.resolveReferenceQuery("Post",n,{}),allPosts:(e,n,{baqendResolver:t})=>t.resolveReferenceCollectionQuery("Post",n,{}),Reference:(e,n,{baqendResolver:t})=>t.resolveReferenceQuery("Reference",n,{}),allReferences:(e,n,{baqendResolver:t})=>t.resolveReferenceCollectionQuery("Reference",n,{}),User:(e,n,{baqendResolver:t})=>t.resolveReferenceQuery("User",n,{}),allUsers:(e,n,{baqendResolver:t})=>t.resolveReferenceCollectionQuery("User",n,{}),Answer:(e,n,{baqendResolver:t})=>t.resolveReferenceQuery("Answer",n,{}),allAnswers:(e,n,{baqendResolver:t})=>t.resolveReferenceCollectionQuery("Answer",n,{}),Role:(e,n,{baqendResolver:t})=>t.resolveReferenceQuery("Role",n,{}),allRoles:(e,n,{baqendResolver:t})=>t.resolveReferenceCollectionQuery("Role",n,{})},Mutation:{createTest:(e,n,{baqendMutator:t})=>t.createEntity("Test",n,{}),updateTest:(e,n,{baqendMutator:t})=>t.updateEntity("Test",n,{}),deleteTest:(e,n,{baqendMutator:t})=>t.deleteEntity("Test",n,{}),addTestReferenceToTestReferenceList:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Test","referenceList",n,{}),removeTestReferenceFromTestReferenceList:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Test","referenceList",n,{}),addTestReferenceToTestReferenceSet:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Test","referenceSet",n,{}),removeTestReferenceFromTestReferenceSet:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Test","referenceSet",n,{}),addEntryToTestReferenceMap:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Test","referenceMap",n,{}),removeEntryFromTestReferenceMap:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Test","referenceMap",n,{}),addStringToTestStringList:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Test","stringList",n,{}),removeStringFromTestStringList:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Test","stringList",n,{}),addStringToTestStringSet:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Test","stringSet",n,{}),removeStringFromTestStringSet:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Test","stringSet",n,{}),addEntryToTestStringMap:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Test","stringMap",n,{}),removeEntryFromTestStringMap:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Test","stringMap",n,{}),addEmbeddedToTestEmbeddedList:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Test","embeddedList",n,{}),removeEmbeddedFromTestEmbeddedList:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Test","embeddedList",n,{}),addEntryToTestEmbeddedMap:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Test","embeddedMap",n,{}),removeEntryFromTestEmbeddedMap:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Test","embeddedMap",n,{}),addEntryToTestRefRefMap:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Test","refRefMap",n,{}),removeEntryFromTestRefRefMap:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Test","refRefMap",n,{}),createQuestion:(e,n,{baqendMutator:t})=>t.createEntity("Question",n,{}),updateQuestion:(e,n,{baqendMutator:t})=>t.updateEntity("Question",n,{}),deleteQuestion:(e,n,{baqendMutator:t})=>t.deleteEntity("Question",n,{}),addAnswerToQuestionAnswers:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Question","answers",n,{}),removeAnswerFromQuestionAnswers:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Question","answers",n,{}),createComment:(e,n,{baqendMutator:t})=>t.createEntity("Comment",n,{}),updateComment:(e,n,{baqendMutator:t})=>t.updateEntity("Comment",n,{}),deleteComment:(e,n,{baqendMutator:t})=>t.deleteEntity("Comment",n,{}),addCommentToCommentComments:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Comment","comments",n,{}),removeCommentFromCommentComments:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Comment","comments",n,{}),createDevice:(e,n,{baqendMutator:t})=>t.createEntity("Device",n,{}),updateDevice:(e,n,{baqendMutator:t})=>t.updateEntity("Device",n,{}),deleteDevice:(e,n,{baqendMutator:t})=>t.deleteEntity("Device",n,{}),createTestReference:(e,n,{baqendMutator:t})=>t.createEntity("TestReference",n,{}),updateTestReference:(e,n,{baqendMutator:t})=>t.updateEntity("TestReference",n,{}),deleteTestReference:(e,n,{baqendMutator:t})=>t.deleteEntity("TestReference",n,{}),addEntryToTestReferenceMap1:(e,n,{baqendMutator:t})=>t.addEntryToCollection("TestReference","map1",n,{}),removeEntryFromTestReferenceMap1:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("TestReference","map1",n,{}),addEntryToTestReferenceMap2:(e,n,{baqendMutator:t})=>t.addEntryToCollection("TestReference","map2",n,{}),removeEntryFromTestReferenceMap2:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("TestReference","map2",n,{}),addEntryToTestReferenceMap3:(e,n,{baqendMutator:t})=>t.addEntryToCollection("TestReference","map3",n,{}),removeEntryFromTestReferenceMap3:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("TestReference","map3",n,{}),createPost:(e,n,{baqendMutator:t})=>t.createEntity("Post",n,{}),updatePost:(e,n,{baqendMutator:t})=>t.updateEntity("Post",n,{}),deletePost:(e,n,{baqendMutator:t})=>t.deleteEntity("Post",n,{}),addCommentToPostComments:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Post","comments",n,{}),removeCommentFromPostComments:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Post","comments",n,{}),createReference:(e,n,{baqendMutator:t})=>t.createEntity("Reference",n,{}),updateReference:(e,n,{baqendMutator:t})=>t.updateEntity("Reference",n,{}),deleteReference:(e,n,{baqendMutator:t})=>t.deleteEntity("Reference",n,{}),createUser:(e,n,{baqendMutator:t})=>t.createEntity("User",n,{}),updateUser:(e,n,{baqendMutator:t})=>t.updateEntity("User",n,{}),deleteUser:(e,n,{baqendMutator:t})=>t.deleteEntity("User",n,{}),addCommentToUserComments:(e,n,{baqendMutator:t})=>t.addEntryToCollection("User","comments",n,{}),removeCommentFromUserComments:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("User","comments",n,{}),addPostToUserPosts:(e,n,{baqendMutator:t})=>t.addEntryToCollection("User","posts",n,{}),removePostFromUserPosts:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("User","posts",n,{}),createAnswer:(e,n,{baqendMutator:t})=>t.createEntity("Answer",n,{}),updateAnswer:(e,n,{baqendMutator:t})=>t.updateEntity("Answer",n,{}),deleteAnswer:(e,n,{baqendMutator:t})=>t.deleteEntity("Answer",n,{}),createRole:(e,n,{baqendMutator:t})=>t.createEntity("Role",n,{}),updateRole:(e,n,{baqendMutator:t})=>t.updateEntity("Role",n,{}),deleteRole:(e,n,{baqendMutator:t})=>t.deleteEntity("Role",n,{}),addUserToRoleUsers:(e,n,{baqendMutator:t})=>t.addEntryToCollection("Role","users",n,{}),removeUserFromRoleUsers:(e,n,{baqendMutator:t})=>t.removeEntryFromCollection("Role","users",n,{})}},typeDefs4="\n  extend type Query {\n    hello: String!\n  }\n",resolvers3={Query:{hello:()=>"World"}},schema=(0,_graphqlTools.makeExecutableSchema)({typeDefs:[typeDefs0,typeDefs1,typeDefs2,typeDefs3,typeDefs4],resolvers:(0,_lodash.merge)(resolvers0,resolvers1,resolvers2,resolvers3)}),collectBaqendHeaders=e=>{const n={"max-age":[],"surrogate-keys":[]},t="/"+e._connector.host.replace(".app.baqend.com","");return e.send=(r=>(...s)=>(s[0].request.headers=_extends({},s[0].request.headers,{"fastly-debug":"1"}),r.call(e,...s).then(e=>{const r=e.headers["cache-control"].split(",")[1].split("=")[1]||30;if(n["max-age"].push(r),e.headers["surrogate-key"]){e.headers["surrogate-key"].replace(new RegExp(t,"g"),"").split(" ").forEach(e=>{e&&-1===n["surrogate-keys"].indexOf(e)&&n["surrogate-keys"].push(e)})}return e})))(e.send),n};exports.get=function(e,n,t){let r=n.query.query,s=collectBaqendHeaders(e),o=buildDataloaders({db:e}),a=new BaqendResolver({db:e,loader:o,api:"relay"}),i=new BaqendMutator({db:e});return(0,_graphql.graphql)(schema,r,null,{baqendResolver:a,baqendMutator:i}).then(e=>{const n=Math.min(...s["max-age"]);0===n?t.set("cache-control","no-cache, no-store, max-age=0"):(t.set("cache-control",`public, max-age=${n}`),t.set("surrogate-key",s["surrogate-keys"].join(" "))),t.json(e)})},exports.post=function(e,n,t){let r=n.body,s=r.query,o=collectBaqendHeaders(e),a=buildDataloaders({db:e}),i=new BaqendResolver({db:e,loader:a,api:"relay"}),d=new BaqendMutator({db:e}),l=r.variables,c=r.operationName;return(0,_graphql.graphql)(schema,s,null,{baqendResolver:i,baqendMutator:d},l,c).then(e=>{const n=Math.min(...o["max-age"]);0===n?t.set("cache-control","no-cache, no-store, max-age=0"):(t.set("cache-control",`public, max-age=${n}`),t.set("surrogate-key",o["surrogate-keys"].join(" "))),t.json(e)})};